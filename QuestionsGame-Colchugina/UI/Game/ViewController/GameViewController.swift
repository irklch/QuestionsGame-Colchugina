//
//  GameViewController.swift
//  QuestionsGame-Colchugina
//
//  Created by –ò—Ä–∏–Ω–∞ –ö–æ–ª—å—á—É–≥–∏–Ω–∞ on 30.10.2021.
//

import UIKit

final class GameViewController: UIViewController {
    
    //MARK: - Private properties
    private let gameSession = GameSession()
    private let questionTextView = UITextView()
    private var answers = [UIButton](repeating: UIButton(), count: 4)
    private var currentQuestion = 0
    
    //MARK: - Lfe cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        gameSession.delegate = self
        setViews()
    }
    
    //MARK: - Private methods
    private func setViews() {
        view.backgroundColor =  UIColor(red: 244/255,
                                        green: 244/255,
                                        blue: 246/255,
                                        alpha: 1)
        
        let viewHeight = (view.frame.height / 2).rounded()
        
        for item in 0..<4 {
            let answerHeight = ((viewHeight - 55)/4).rounded()
            let answer = UIButton()
            view.addSubview(answer)
            answer.translatesAutoresizingMaskIntoConstraints = false
            let botAnch = (-25 - CGFloat(item) * (answerHeight + 10)).rounded()
            
            NSLayoutConstraint.activate([
                answer.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant:  botAnch),
                answer.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
                answer.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
                answer.heightAnchor.constraint(equalToConstant: answerHeight)
            ])
            answer.backgroundColor = .systemYellow
            answer.layer.cornerRadius = 20
            answer.layer.shadowOffset = CGSize(width: 0, height: 3)
            answer.layer.shadowColor = UIColor.black.cgColor
            answer.layer.shadowOpacity = 0.1
            answer.layer.shadowRadius = 4
            answer.layer.shadowPath = UIBezierPath(rect: answer.bounds).cgPath
            answer.clipsToBounds = false
            answer.setTitle(questionsList[currentQuestion].answers[item], for: .normal)
            answer.setTitleColor(.darkGray, for: .normal)
            answer.titleLabel?.font = UIFont(name: "Avenir-Light", size: 20)
            let indexInArray = abs(item - 3)
            answer.tag = indexInArray
            answer.addTarget(self, action: #selector(answerTapped(_:)), for: .touchUpInside)
            answers[indexInArray] = answer
        }
        
        view.addSubview(questionTextView)
        questionTextView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            questionTextView.topAnchor.constraint(equalTo: view.topAnchor, constant: 10),
            questionTextView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            questionTextView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            questionTextView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -viewHeight - 10)
        ])
        questionTextView.layer.cornerRadius = 20
        questionTextView.layer.shadowColor = UIColor.black.cgColor
        questionTextView.layer.shadowOffset = CGSize(width: 0, height: 3)
        questionTextView.layer.shadowRadius = 4
        questionTextView.layer.shadowOpacity = 0.1
        questionTextView.layer.shadowPath = UIBezierPath(rect: questionTextView.bounds).cgPath
        questionTextView.clipsToBounds = false
        questionTextView.text = questionsList[currentQuestion].question
        questionTextView.textAlignment = .center
        questionTextView.contentInset.top = viewHeight/4
        questionTextView.font = UIFont(name: "Avenir-Light", size: 20)
        
    }
    
    @objc
    private func answerTapped(_ sender: UIButton) {
        
        if sender.tag == questionsList[currentQuestion].rightAnswerIndex {
            sender.backgroundColor = .green
            if currentQuestion == questionsList.count - 1 {
                gameDidEnd(questionsCount: questionsList.count, rightAnswersCount: currentQuestion)
                showAlert(title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ü•≥", text: "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤–µ—Ä–Ω–æ")
            } else {
                currentQuestion += 1
            }
        }
        else {
            showAlert(title: "Ooops üò∞", text: "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")
            gameDidEnd(questionsCount: questionsList.count, rightAnswersCount: currentQuestion)
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) { [weak self] in
            guard let self = self else {return}
            
            sender.backgroundColor = .systemYellow
            self.questionTextView.text = questionsList[self.currentQuestion].question
            for item in 0..<4 {
                let answer = questionsList[self.currentQuestion].answers[item]
                self.answers[item].setTitle(answer, for: .normal)
            }
        }
    }
    
    private func showAlert(title: String, text: String) {
        let alert = UIAlertController(title: title,
                                      message: text, preferredStyle: .alert)
        let action = UIAlertAction(title: "Ok", style: .default, handler: { _ in
            self.dismiss(animated: true)
        })
        alert.addAction(action)
        present(alert, animated: true, completion: nil)
    }
    
}

//MARK: - Extension
extension GameViewController: GameDelegate {
    func gameDidEnd(questionsCount: Int, rightAnswersCount: Int) {
        gameSession.gameDidEnd(questionsCount: questionsCount, rightAnswersCount: rightAnswersCount)
    }
    
}

//MARK: - Data
fileprivate let questionsList = [
    Question(question: "–ö–∞–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è, –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—è–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?",
             answers: ["–°–≤–æ–π—Å—Ç–≤–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
                       "–õ–µ–Ω–∏–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
                       "–õ–∞—Ç–µ–Ω—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
                       "–ü–∞—Å—Å–∏–≤–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"],
             rightAnswerIndex: 1),
    Question(question: "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è, —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –±–æ–ª–µ–µ –∫–µ–π—Å–æ–≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è",
             answers: ["–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è",
                       "–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è",
                       "–ö–≤–æ–∑–Ω—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è",
                       "–ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è"],
             rightAnswerIndex: 1),
    Question(question: "–ö–∞–∫–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É –ø—Ä–∏—Å—É—â–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: —É–º–µ–Ω—å—à–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Ç—Å–≤–µ–Ω–Ω–æ–π –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏",
             answers: ["Bridge",
                       "Composite",
                       "Chain of Responsibility",
                       "Adapter"],
             rightAnswerIndex: 2),
    Question(question: "–ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –º–æ–∂–µ–º –ª–∏ –º—ã –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å?",
             answers: ["–¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã",
                       "–ù–µ—Ç",
                       "–¢–æ–ª—å–∫–æ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã",
                       "–î–∞"],
             rightAnswerIndex: 3),
    Question(question: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —á–µ—Ä–µ–∑ –ª–∏—Ç–µ—Ä–∞–ª —Å–ª–æ–≤–∞—Ä—è",
             answers: ["var a: [Int: String] = [0: \"Name\"]",
                       "var b = [Int: String](1: \"Name\")",
                       "var c: <Int: String>[0: \"Name\"]",
                       "var d: (Int: String)[0: \"Name\"]"],
             rightAnswerIndex: 0),
    Question(question: "–ü–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∫ –º–µ—Ç–æ–¥—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è, –æ–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞",
             answers: ["public",
                       "private",
                       "static",
                       "mutating"],
             rightAnswerIndex: 3),
]
